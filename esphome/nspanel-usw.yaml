substitutions:
  ###### CHANGE ME START ######
  device_name: "nspanel-usw"
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password

  nextion_update_url: !secret nspanel_update_url

  ##### addon-configuration #####
  ## addon_climate ##
  # addon_climate_heater_relay: "1" # possible values: 1/2

  ##### CHANGE ME END #####

packages:
  remote_package:
    url: https://github.com/Blackymas/NSPanel_HA_Blueprint
    ref: dev
    files:
      - nspanel_esphome.yaml # Core package
      # - nspanel_esphome_advanced.yaml # activate advanced (legacy) elements - can be useful for troubleshooting
      # - nspanel_esphome_addon_climate_cool.yaml # activate for local climate (cooling) control
      # - nspanel_esphome_addon_climate_heat.yaml # activate for local climate (heater) control
    refresh: 1d

##### My customization - Start #####
button:
  ##### EXIT REPARSE TFT DISPLAY #####
  - name: ${device_name} Exit reparse
    platform: template
    icon: mdi:file-sync
    id: tft_reparse_off
    entity_category: config
    on_press:
      - logger.log: "Button pressed: Exit reparse"
      - script.execute: exit_reparse

captive_portal:

esp32:
  framework:
    type: esp-idf

sensor:
  ##### Uptime Sensors #####
  - name: ${device_name} Uptime seconds
    id: uptime_sec
    platform: uptime
    internal: true

  - name: ${device_name} API uptime
    id: api_timestamp
    platform: template
    lambda: "return id(time_provider).now().timestamp;"
    internal: false
    device_class: timestamp
    entity_category: diagnostic
    accuracy_decimals: 0
    update_interval: never

  - name: ${device_name} Device uptime
    id: device_timestamp
    platform: template
    lambda: "return (id(time_provider).now().timestamp - id(uptime_sec).state);"
    internal: false
    device_class: timestamp
    entity_category: diagnostic
    accuracy_decimals: 0
    update_interval: never

  ##### WIFI Signal stregth
  - name: ${device_name} RSSI
    platform: wifi_signal
    update_interval: 60s
    on_value:
      - script.execute:
          id: refresh_wifi_icon

text_sensor:
  ##### ESPhome version used to compile the app #####
  - name: ${device_name} ESPhome Version
    platform: version
    disabled_by_default: true

  - platform: wifi_info
    ip_address:
      name: ${device_name} IP
      disabled_by_default: true
      id: ip_address
    ssid:
      name: ${device_name} SSID
      disabled_by_default: true
    bssid:
      name: ${device_name} BSSID
      disabled_by_default: true

time:
  - id: !extend time_provider
    on_time_sync:
      then:
        - component.update: api_timestamp
        - component.update: device_timestamp

web_server:
  id: web_server_std
  port: 80
  auth:
    username: admin
    password: ${wifi_password}
##### My customization - End #####
