substitutions:
  # ## usage of secrets-file ## -> comment in ###### Change ME ######
  device_name: "water-level-weather-station" # Wird im Blueprint benÃ¶tigt!
  wifi_ssid: !secret wifi_ssid # add in your esphome secrets file.
  wifi_password: !secret wifi_password # add in your esphome secrets file. -> per default this is also used for ota_password and web_password
  # ota_password: !secret _ota_password # add in your esphome secrets file. - manual change in code required to activate
  # web_password: !secret _web_password # add in your esphome secrets file. - manual change in code required to activate
  # api_password: !secret _api_password # add in your esphome secrets file. - manual change in code required to activate

  #ESP32 Pins
  sdaPin: GPIO21
  sclPin: GPIO22
  rainWaterDetectionSensorPin: GPIO35
  rainWaterDetectionAnalogPin: GPIO32
  waterFlowMeterSensorPin: GPIO33
  liquidDetection_01Pin: GPIO19
  liquidDetection_02Pin: GPIO18
  liquidDetection_03Pin: GPIO17
  liquidDetection_04Pin: GPIO16
  sensorSwitchingPin: GPIO15
  solarVoltagePin: GPIO39
  batteryVoltagePin: GPIO34
  

  #ESP8266 Pins
  # sdaPin: "4" # D2
  # sclPin: "5" # D1
  # rainWaterDetectionSensorPin: "16" # D0
  # rainWaterDetectionAnalogPin: "A0" # A0
  # liquidDetection_01Pin: "14" # D5
  # liquidDetection_02Pin: "12" # D6
  # liquidDetection_03Pin: "13" # D7
  # liquidDetection_04Pin: "15" # D8

esphome:
  name: ${device_name}
  friendly_name: Water Level with Weather Station
  on_boot:
    priority: 600
    then:
      - output.turn_on: output_sensor_switching

#ESP8266
# esp8266:
#   board: d1_mini

#ESP32
esp32:
  board: nodemcu-32s

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "9UhvlDy+dMsTb6/uPThYr9cYEOibd+1L0cC0guvDVao="

ota:
  password: "3554b45db4d502758b49d3f777f58a54"

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name}"
    password: ${wifi_password}

web_server:
  port: 80
  auth:
    username: admin
    password: ${wifi_password}
    ##### advanced config - change to use web_password #####
    # password: ${web_password}

captive_portal:

# Component
i2c:
  sda: ${sdaPin}
  scl: ${sclPin}
  scan: true
  id: bus_a

output:
  ##### Sensor Switching
  - platform: gpio
    pin: ${sensorSwitchingPin}
    id: output_sensor_switching
    
switch:
  ##### Switch Shutdown
  - platform: shutdown
    id: switch_shutdown
    name: "Shutdown"


  ##### Sensor Enable Output
  - platform: output
    restore_mode: ALWAYS_ON
    output: 'output_sensor_switching'
    name: "Sensor Enable Output"

  ##### Sensor Enable Switching
  - platform: template
    id: switch_sensor_switching_enable
    optimistic: on
    restore_mode: ALWAYS_ON
    name: "Sensor Enable Switching"

interval:
  - interval: 5min
    then:
      if:
        condition:
          switch.is_on: switch_sensor_switching_enable
        then:
          - output.turn_on: output_sensor_switching
          - delay: 5s
          - lambda: |-
              id(sensor_sht3xd).update();
              id(sensor_bh1750).update();

          # id(binary_sensor_liquid_detection_01).update();
          # id(binary_sensor_liquid_detection_02).update();
          # id(binary_sensor_liquid_detection_03).update();
          # id(binary_sensor_liquid_detection_04).update();
          - delay: 10s
          - output.turn_off: output_sensor_switching

binary_sensor:
  ##### Rain / Water Detection Sensor DO
  - platform: gpio
    pin:
      number: ${rainWaterDetectionSensorPin}
      mode:
        input: true
        # pulldown: true # comment if using ESP32
      inverted: true
    device_class: moisture
    name: "Rain Detection"

  ##### XKC-Y25-V
  - platform: gpio
    id: binary_sensor_liquid_detection_01
    pin:
      number: ${liquidDetection_01Pin}
      mode:
        input: true
    device_class: moisture
    filters:
      - delayed_on: 10ms
    name: "Liquid Detection 01"

  - platform: gpio
    id: binary_sensor_liquid_detection_02
    pin:
      number: ${liquidDetection_02Pin}
      mode:
        input: true
    device_class: moisture
    filters:
      - delayed_on: 10ms
    name: "Liquid Detection 02"

  - platform: gpio
    id: binary_sensor_liquid_detection_03
    pin:
      number: ${liquidDetection_03Pin}
      mode:
        input: true
    device_class: moisture
    filters:
      - delayed_on: 10ms
    name: "Liquid Detection 03"

  - platform: gpio
    id: binary_sensor_liquid_detection_04
    pin:
      number: ${liquidDetection_04Pin}
      mode:
        input: true
    device_class: moisture
    filters:
      - delayed_on: 10ms
    name: "Liquid Detection 04"

sensor:
  ##### SHT30
  - platform: sht3xd
    id: sensor_sht3xd
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    address: 0x44
    update_interval: never


  ##### BH1750 Light Intensity
  - platform: bh1750
    id: sensor_bh1750
    name: "Illuminance"
    address: 0x23
    update_interval: never

  ##### Rain / Water Detection Sensor AO
  - platform: adc
    id: sensor_rain_detection_analog
    pin: ${rainWaterDetectionAnalogPin}
    attenuation: 11db
    # filters:
    # - lambda: |-
    #     auto sensor_min = 1176425;
    #     auto sensor_max = 1279801;
    #     auto first_mass = 0.0;
    #     auto second_mass = 4;

    #     auto r = map(x, sensor_min, sensor_max, first_mass, second_mass);
    #     return r
    #     # if (r > 0) return r;
    #     # return 0;
    name: "Rain Detection Analog"


  ##### FS300A Water Flow Meter Sensor
  - platform: pulse_counter
    id: pulse_irrigation
    pin: ${waterFlowMeterSensorPin}
    name: "Water Flow Meter Pulses"
  
  - platform: pulse_counter
    pin: ${waterFlowMeterSensorPin}
    unit_of_measurement: 'L/min'
    filters:
      # The water flow sensor outputs pulse proportional to the water flow with: Pulse Frequency = Flow* 5.5.That is,
      # if the output frequency is 48, then the water flow: 48/5.5= 8.72(L/min)
      - lambda: |-
          return x / 5.5;
    name: "Water Flow Meter"

  ##### WIFI Signal stregth
  - name: RSSI
    platform: wifi_signal
    update_interval: 60s

  #ESP32 only
  - platform: adc
    id: solar_voltage
    pin: ${solarVoltagePin}
    attenuation: 11db
    accuracy_decimals: 3
    filters:
    - multiply: 2.96537
    name: Solar Panel Voltage
    update_interval: 60s

  - platform: adc
    id: batt_voltage
    pin: ${batteryVoltagePin}
    attenuation: 11db
    accuracy_decimals: 3
    filters:
    - multiply: 2.96537
    name: Battery Voltage
    update_interval: 60s
    on_value_range:
      below: 3.00
      then:
        - switch.turn_on:
            id: switch_shutdown


  #Convert the Voltage to a battery  level (%)
  - platform: copy
    source_id: batt_voltage
    id: batt_level
    icon: "mdi:battery"
    unit_of_measurement: '%'
    accuracy_decimals: 1
    filters:
      - calibrate_linear:
      # Map from voltage to Battery level
          - 3 -> 0
          - 3.9 -> 100
      #Handle/cap boundaries
      - lambda: |
          if (x < 0) return 0;
          else if (x > 100) return 100;
          else return (x);
      - delta: 0.5 #Only send values to HA if they change
      - throttle: 30s #Limit values sent to Ha
    name: Battery Level

  ##### human readable uptime sensor output to the text sensor above
  - platform: uptime
    name: Uptime in Days
    id: uptime_sensor_days
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor_days).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

time:
  - platform: homeassistant
    id: homeassistant_time

##### Text sensors with general information.
text_sensor:
  ##### Expose ESPHome version as sensor.
  - platform: version
    name: Version

  ##### Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: IP
    bssid:
      name: BSSID

  ##### human readable update text sensor from sensor:uptime
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start